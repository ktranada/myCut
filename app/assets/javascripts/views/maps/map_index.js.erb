MyCut.Views.IndexMap = Backbone.View.extend({
  attributes: {
    id: "map-canvas"
  },

  initialize: function(options){
    this._markers = {};
    this.markerImage = "http://res.cloudinary.com/mycut/image/upload/c_scale,w_20/v1435185992/raty/scissor.png";
    this.listenTo(this.collection, 'add', this.addMarker);
    this.listenTo(this.collection, "remove", this.removeMarker);

    var geocoder = L.mapbox.geocoder('mapbox.places-v1');
    geocoder.query(options.updatedLoc, showMap);

    function showMap(err, data) {
      debugger
        if (data.lbounds) {
            this.updatedLoc = [data.latlng[0], data.latlng[1]];
        }
      }
  },

  initMap: function(addMarkers){
    debugger
    var mapOptions = this.updatedLoc || [ 37.7577, -122.4376  + .1];
    this._map = L.mapbox.map(this.el, 'kevintran.3285da64')
        .setView(mapOptions, 12);

    if (addMarkers){
      this.collection.each(this.addMarker.bind(this))
    }
  },

   addMarker: function (listing) {
     if (this._markers[listing.id]) { return };
     var view = this;

     var marker = L.icon({
          iconUrl: this.markerImage
      });

     var newMarker = L.marker([listing.get('latitude'), listing.get('longitude')], {icon: marker })
                      .bindPopup(JST['maps/info_window']({ shop: listing }))
                      .addTo(this._map);

     this._markers[listing.id] = newMarker;
   },

   removeMarker: function (listing) {
     var marker = this._markers[listing.id];
     delete this._markers[listing.id];
   },

   changeCenter: function(loc){
     this._map.setView([loc[0] + .03, loc[1] + .1])
   },


});
